{{- $base := . -}}
package {{.Package}}

/*
 *  WARNING: CODE GENERATED AUTOMATICALLY.
 *
 *  Use "go generate" to update these files.
 *
 *  THIS FILE SHOULD NOT BE EDITED BY HAND.
 *
 */

import (
        "encoding/xml"
        "errors"
)

const (
        {{range $n, $e := .Values -}}
                {{$base.Name $e}}{{if eq 0 $n}} {{$base.Type}} = 1 + iota{{end}}
        {{end -}}
)

var ErrInvalid{{.Type}} = errors.New("unknown or invalid {{.Type}} value")

type {{.Type}} uint32

func To{{.Type}}(s string) {{.Type}} {
        switch s {
        {{range $e := .Values -}}
        case "{{$e}}":
                return {{$base.Name $e}}
        {{end -}}
        default:
                return {{.Type}}(0)
        }
}

func (v {{.Type}}) String() string {
        switch v {
        {{range $e := .Values -}}
        case {{$base.Name $e}}:
                return "{{$e}}"
        {{end -}}
        default:
                return ""
        }
}

func (v {{.Type}}) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
        return xml.Attr{Name: name, Value: v.String()}, nil
}

func (v *{{.Type}}) UnmarshalXMLAttr(attr xml.Attr) error {
        switch attr.Value {
        {{range $e := .Values -}}
        case "{{$e}}":
                *v = {{$base.Name $e}}
        {{end -}}
        default:
                return ErrInvalidApproximationType
        }

        return nil
}

func ( v {{.Type}}) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
        return e.EncodeElement(v.String(), start)
}

func (v *{{.Type}}) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {

        var s string
        err := d.DecodeElement(&s, &start)
        if err != nil {
                return err
        }

        switch s {
        {{range $e := .Values -}}
        case "{{$e}}":
                *v = {{$base.Name $e}}
        {{end -}}
        default:
                return ErrInvalidApproximationType
        }

        return nil
}
