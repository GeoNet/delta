package main

import (
	"encoding/xml"
	"sort"
	"strconv"
	"strings"
	"sync"

	"github.com/GeoNet/delta/metadb"
	"github.com/GeoNet/delta/resp"
)

const header = "<?xml version=\"1.0\" standalone=\"yes\"?>\n"
const warning = "<!-- warning this file is automatically generated -->\n"

type Pin struct {
	PinNo    int    `xml:"pin_no,attr"`
	Azimuth  string `xml:"azimuth,attr"`
	ChanNo   string `xml:"chan_no,attr,omitempty"`
	Dip      string `xml:"dip,attr"`
	InstCode string `xml:"inst_code,attr"`
	Reversed string `xml:"reversed,attr"`
	SeisCode string `xml:"seis_code,attr"`
	StreamId string `xml:"stream_id,attr"`
}

type Altus struct {
	Installed string `xml:"installed,attr"`
	Alias     string `xml:"alias_id,attr,omitempty"`
	DevCode   string `xml:"dev_code,attr"`
	InstId    string `xml:"inst_id,attr"`
	Override  string `xml:"override,attr,omitempty"`
	Removed   string `xml:"removed,attr"`

	Pins []Pin `xml:"pin,omitempty"`
}

type Site struct {
	SiteId    string  `xml:"site_id,attr"`
	Height    float64 `xml:"height,attr"`
	Latitude  float64 `xml:"latitude,attr"`
	Longitude float64 `xml:"longitude,attr"`
	Name      string  `xml:"name,attr"`
	NetworkId string  `xml:"network_id,attr"`

	Altuses []Altus `xml:"altus,omitempty"`
}

type StrongMotion struct {
	XMLName xml.Name `xml:"strong_motion"`

	Sites []Site `xml:"site,omitempty"`
}

type Installations []metadb.Installation

func (t Installations) Len() int           { return len(t) }
func (t Installations) Swap(a, b int)      { t[a], t[b] = t[b], t[a] }
func (t Installations) Less(a, b int) bool { return t[a].Start.Before(t[b].Start) }

func buildSites(base string) ([]Site, error) {

	// load delta meta helper
	db := metadb.NewMetaDB(base)

	// load station details
	stations, err := db.Stations()
	if err != nil {
		return nil, err
	}

	var sites []Site

	// run through each station ....
	for _, station := range stations {

		installations, err := db.Installations(station.Code)
		if err != nil {
			return nil, err
		}

		network, err := db.Network(station.Network)
		if err != nil {
			return nil, err
		}
		if network == nil {
			continue
		}

		sort.Sort(Installations(installations))

		var static sync.Once
		var altuses []Altus

		for _, installation := range installations {

			switch installation.Datalogger.Model {
			case "Q330/3", "Q330/6", "Q330HR/6", "Q330S/3", "Q330S/6":
				switch installation.Sensor.Model {
				case "FBA-ES-T", "FBA-ES-T-ISO":
					if a, ok := slates[station.Code]; ok {
						static.Do(func() {
							altuses = append(altuses, a...)
						})
					}
				}
				continue
			}

			switch installation.Sensor.Model {
			case "FBA-ES-T-BASALT", "FBA-ES-T-DECK", "FBA-23-DECK", "FBA-ES-T", "FBA-ES-T-ISO", "Kinemetrics SBEPI", "SDP":
				switch installation.Datalogger.Model {
				case "OBSIDIAN", "K2", "ETNA", "BASALT", "BASALT 8X DATALOGGER":
					for _, response := range resp.Streams(installation.Datalogger.Model, installation.Sensor.Model) {
						stream, err := db.StationLocationSamplingRateStartStream(
							station.Code,
							installation.Location,
							response.Datalogger.SampleRate,
							installation.Start)
						if err != nil {
							return nil, err
						}
						if stream == nil {
							continue
						}

						if response.Datalogger.SampleRate != 200 {
							continue
						}

						altuses = append(altuses, Altus{
							Installed: installation.Start.Format("2006/01/02,15:04:05"),
							Removed:   installation.End.Format("2006/01/02,15:04:05"),
							Override: func() string {
								if _, ok := aliases[station.Code]; ok {
									return "yes"
								}
								switch installation.Datalogger.Model {
								case "ETNA":
									return "no"
								default:
									return ""
								}
							}(),
							Alias: func() string {
								if a, ok := aliases[station.Code]; ok {
									return a
								}
								return ""
							}(),
							DevCode: func() string {
								switch installation.Datalogger.Model {
								case "K2":
									return "K2 "
								case "ETNA":
									return "ETN"
								case "BASALT":
									return "BAS"
								case "BASALT 8X DATALOGGER":
									return "BAS"
								case "OBSIDIAN":
									return "OBS"
								default:
									return installation.Datalogger.Model
								}
							}(),
							InstId: func() string {
								switch installation.Datalogger.Model {
								case "BASALT 8X DATALOGGER":
									return installation.Datalogger.Serial
								default:
									return installation.Sensor.Serial
								}
							}(),
							Pins: func() []Pin {
								var pins []Pin

								lookup := response.Channels(func() bool {
									if installation.Sensor.Azimuth != 0.0 {
										return true
									}
									return stream.Axial
								}())

								for pin, comp := range response.Components {
									if !(pin < len(lookup)) {
										continue
									}
									channel := lookup[pin]

									dip := comp.Dip
									azimuth := installation.Sensor.Azimuth + comp.Azimuth
									reversed := func() bool {
										switch installation.Sensor.Model {
										case "FBA-23-DECK":
											return true
										default:
											return false
										}
									}()

									// only rotate horizontal components
									if dip == 0.0 {
										if reversed {
											azimuth += 180.0
										}
										if response.Sensor.Reversed {
											azimuth += 180.0
										}
										if response.Datalogger.Reversed {
											azimuth += 180.0
										}
										if stream.Reversed {
											azimuth += 180.0
										}
										// avoid negative zero
										dip = 0.0
									} else {
										if reversed {
											dip *= -1.0
										}
										if response.Sensor.Reversed {
											dip *= -1.0
										}
										if response.Datalogger.Reversed {
											dip *= -1.0
										}
										if stream.Reversed {
											dip *= -1.0
										}
										azimuth = 0.0
									}

									// bring into positive range
									for azimuth < 0.0 {
										azimuth += 360.0
									}
									for azimuth > 360.0 {
										azimuth -= 360.0
									}

									chan_no := pin
									if loc, err := strconv.Atoi(installation.Location); err == nil {
										chan_no += (loc - 20) * 3
									}

									pins = append(pins, Pin{
										PinNo: pin,
										ChanNo: func() string {
											switch installation.Datalogger.Model {
											case "BASALT 8X DATALOGGER":
												if chan_no > 2 {
													return strconv.Itoa(chan_no)
												}
												return ""
											default:
												return ""
											}
										}(),
										Azimuth: func() string {
											//azimuth,
											return strconv.FormatFloat(azimuth, 'f', 1, 64)
										}(),
										Dip: func() string {
											//dip,
											return strconv.FormatFloat(dip, 'f', 1, 64)
										}(),
										InstCode: func() string {
											return strings.ToLower(channel[len(channel)-1:])
										}(),
										Reversed: func() string {
											switch installation.Sensor.Model {
											case "FBA-23-DECK":
												return "yes"
											default:
												return "no"
											}
										}(),
										SeisCode: func() string {
											switch installation.Sensor.Model {
											case "Kinemetrics SBEPI":
												return "EPI"
											case "FBA-ES-T-OBSIDIAN":
												return "OBS"
											case "FBA-ES-T-BASALT":
												return "BAS"
											case "FBA-ES-T-DECK":
												return "EP2"
											case "FBA-23-DECK":
												return "FB2"
											case "FBA-ES-T":
												return "EPI"
											case "SDP":
												return "SDP"
											default:
												return installation.Sensor.Model
											}
										}(),
										StreamId: func() string {
											return strings.Join([]string{station.Code,
												func() string {
													return strings.Join([]string{installation.Location, channel}, "-")
												}(),
												func() string {
													if network.External != "" {
														return network.External
													}
													return network.Code

												}()}, "/")
										}(),
									})
								}
								return pins
							}(),
						})
					}
				}
			}
		}

		if !(len(altuses) > 0) {
			continue
		}

		sites = append(sites, Site{
			SiteId: station.Code,
			NetworkId: func() string {
				if network.External != "" {
					return network.External
				}
				return network.Code
			}(),
			Name:      station.Name,
			Latitude:  station.Latitude,
			Longitude: station.Longitude,
			Height:    station.Elevation,
			Altuses:   altuses,
		})

	}

	return sites, nil
}

func encodeSites(sites []Site) ([]byte, error) {

	res, err := xml.MarshalIndent(&StrongMotion{
		Sites: sites,
	}, "", "  ")
	if err != nil {
		return nil, err
	}
	str := strings.Replace(string(res), "></pin>", " />", -1)
	res = append([]byte(header+warning), append([]byte(str), '\n')...)

	return res, nil
}
